name: rust-build

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]
  release:
      types: [published]

env:
  CARGO_TERM_COLOR: always
  # Make sure CI fails on all warnings, including Clippy lints
  RUSTFLAGS: "-Dwarnings"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Rust Build
    strategy:
      matrix:
        arch: [amd64, arm64]
        db: [mysql, sqlite]
        login: [local-users, oauth]
        include:
          #runson
          - arch: 'amd64'
            runson: 'ubuntu-latest'
            rust-target: 'x86_64-unknown-linux-musl'
          - arch: 'arm64'
            runson: 'ubuntu-24.04-arm'
            rust-target: 'aarch64-unknown-linux-musl'
          # minimal build
          - login: 'local-users'
            minimal: true
            feature: ''
          - login: 'oauth'
            minimal: false
            feature: '-F all-login'

    permissions:
      contents: read

    runs-on: ${{ matrix.runson }}
    steps:
    - uses: actions/checkout@v4

    - name: Install mysql build dependencies
      if: ${{ matrix.db == 'mysql' }}
      run: sudo apt install libtirpc-dev

    - name: Build
      run: cargo build --verbose --release --target ${{ matrix.rust-target }} --target-dir ci-build --no-default-features -F ${{ matrix.db }}-bundle ${{ matrix.feature }} 

    - name: Upload build binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.arch }}-${{ matrix.db }}-${{ matrix.login }}-rtabby-web-api
        path: ci-build/release/rtabby-web-api

  docker:
    strategy:
      matrix:
        db: [mysql, sqlite]
        login: [local-users, oauth]
        include:
          # minimal build
          - login: 'local-users'
            minimal: true
            feature: ''
          - login: 'oauth'
            minimal: false
            feature: '-F all-login'
    name: Docker
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download amd64 binary
        uses: actions/download-artifact@v4
        with:
          name: amd64-${{ matrix.db }}-${{ matrix.login }}-rtabby-web-api
          path: binary/linux/amd64/rtabby-web-api

      - name: Download arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: arm64-${{ matrix.db }}-${{ matrix.login }}-rtabby-web-api
          path: binary/linux/arm64/rtabby-web-api

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        # if: ${{ github.event_name == 'release' }}
        uses: sigstore/cosign-installer@v3.9.2

      - name: Set up QEMU
        # if: ${{ github.event_name == 'release' }}
        uses: docker/setup-qemu-action@v3

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        # if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare
        id: prep
        env:
          REF: ${{ github.ref }}
        run: |
          if [[ "$REF" == "refs/tags/v"* ]]; then
            tag=$(git describe --tags $(git rev-list --tags --max-count=1))
            tag=${tag:1}
          else
            tag=$(git log -1 --format="%cd" --date=short | sed s/-//g)
          fi
          echo "TAG=$tag" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=$(echo $(git rev-parse HEAD) | cut -c1-7)" >> $GITHUB_OUTPUT

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver, pattern={{version}}, enable=${{ matrix.db == 'mysql' }}, suffix=${{ matrix.minimal && '-minimal' || '' }}
            type=semver, pattern={{version}}, suffix=-${{ matrix.db }}${{ matrix.minimal && '-minimal' || '' }}
            type=sha, format=short
            type=raw, value=latest, enable=${{ matrix.db == 'mysql' }}, suffix=${{ matrix.minimal && '-minimal' || '' }}
            type=raw, value=latest, suffix=-${{ matrix.db }}${{ matrix.minimal && '-minimal' || '' }}
            type=raw, value=${{ matrix.db }}, suffix=${{ matrix.minimal && '-minimal' || '' }}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: Dockerfile-ci
          platforms: linux/amd64,linux/arm64
          push: true
          # push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_COMMIT=${{ steps.prep.outputs.GIT_COMMIT }}
            FEATURE_FLAGS=-F|${{ matrix.db }}-bundle${{ !matrix.minimal && '|-F|all-login' || '' }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        # if: ${{ github.event_name == 'release' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}