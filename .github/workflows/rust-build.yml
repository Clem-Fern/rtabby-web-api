name: rust-build

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]
  release:
      types: [published]

env:
  CARGO_TERM_COLOR: always
  # Make sure CI fails on all warnings, including Clippy lints
  RUSTFLAGS: "-Dwarnings"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Rust/Docker Build
    strategy:
      matrix:
        arch: [amd64, arm64]
        db: [mysql, sqlite]
        login: [local-users, oauth]
        include:
          #runson
          - arch: 'amd64'
            runson: 'ubuntu-latest'
          - arch: 'arm64'
            runson: 'ubuntu-24.04-arm'
          # minimal build
          - login: 'local-users'
            minimal: true
            feature: ''
          - login: 'oauth'
            minimal: false
            feature: '-F all-login'

    permissions:
      contents: read
      packages: write

    runs-on: ${{ matrix.runson }}
    steps:
    - uses: actions/checkout@v4

    - name: Install mysql build dependencies
      if: ${{ matrix.db == 'mysql' }}
      run: sudo apt install libtirpc-dev

    - name: Build
      run: cargo build --verbose --release --target-dir ci-build --no-default-features -F ${{ matrix.db }}-bundle ${{ matrix.feature }}

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      # if: ${{ github.event_name == 'release' }}
      uses: sigstore/cosign-installer@v3.9.2

    # Set up BuildKit Docker container builder to be able to build
    # multi-platform images and export cache
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.11.1

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      # if: ${{ github.event_name == 'release' }}
      uses:  docker/login-action@v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare
      id: prep
      env:
        REF: ${{ github.ref }}
      run: |
        if [[ "$REF" == "refs/tags/v"* ]]; then
          tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          tag=${tag:1}
        else
          tag=$(git log -1 --format="%cd" --date=short | sed s/-//g)
        fi
        echo "TAG=$tag" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=$(echo $(git rev-parse HEAD) | cut -c1-7)" >> $GITHUB_OUTPUT

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5.7.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=false
        tags: |
          type=semver, pattern={{version}}, enable=${{ matrix.db == 'mysql' }}, suffix=${{ matrix.minimal && '-minimal' || '' }}
          type=semver, pattern={{version}}, suffix=-${{ matrix.db }}${{ matrix.minimal && '-minimal' || '' }}
          type=sha, format=short
          type=raw, value=latest, enable=${{ matrix.db == 'mysql' }}, suffix=${{ matrix.minimal && '-minimal' || '' }}
          type=raw, value=latest, suffix=-${{ matrix.db }}${{ matrix.minimal && '-minimal' || '' }}
          type=raw, value=${{ matrix.db }}, suffix=${{ matrix.minimal && '-minimal' || '' }}

    # Build and push Docker image with Buildx
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v6.18.0
      with:
        context: .
        file: Dockerfile-ci
        platforms: linux/${{ matrix.arch }}
        push: true
        # push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GIT_COMMIT=${{ steps.prep.outputs.GIT_COMMIT }}

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      # if: ${{ github.event_name == 'release' }}
      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}